<?php
namespace Application\Factory;
 
use Zend\EventManager\AbstractListenerAggregate;
use Zend\EventManager\EventManagerInterface;
use Zend\Mvc\MvcEvent;
 
class CacheListener extends AbstractListenerAggregate {
 
    protected $listeners = array();
    protected $cacheService;

    /**
     * CacheListener constructor.
     * @param \Zend\Cache\Storage\Adapter\Filesystem $cacheService
     */
    public function __construct(\Zend\Cache\Storage\Adapter\Filesystem $cacheService) {
    // We store the cache service generated by Zend\Cache from the service manager
        $this->cacheService = $cacheService;
    }

    /**
     * @param EventManagerInterface $events
     */
    public function attach(EventManagerInterface $events) {
    // The AbstractListenerAggregate we are extending from allows us to attach our even listeners
        $this->listeners[] = $events->attach(MvcEvent::EVENT_ROUTE, array($this, 'getCache'), -1000);
        $this->listeners[] = $events->attach(MvcEvent::EVENT_RENDER, array($this, 'saveCache'), -10000);
    }

    /**
     * @return \Zend\Cache\Storage\Adapter\Filesystem
     */
    public function getCacheService(){
        return $this->cacheService;
    }

    /**
     * @param MvcEvent $event
     * @return void|\Zend\Stdlib\ResponseInterface
     */
    public function getCache(MvcEvent $event) {
        $match = $event->getRouteMatch();
     
    // is valid route?
        if (!$match) {
            return;
        }
     
    // does our route have the cache flag set to true?
        if ($match->getParam('cache')) {
            $cacheKey = $this->genCacheName($match);
 
        // get the cache page for this route
            $data = $this->cacheService->getItem($cacheKey);
         
        // ensure we have found something valid
            if ($data !== null) {
                $response = $event->getResponse();
                $response->setContent($data);
 
                return $response;
            }
        }
    }

    /**
     * @param MvcEvent $event
     */
    public function saveCache(MvcEvent $event) {
        $match = $event->getRouteMatch();
 
    // is valid route?
        if (!$match) {
            return;
        }
     
    // does our route have the cache flag set to true?
        if ($match->getParam('cache')) {
            $response = $event->getResponse();
            $data = $response->getContent();
 
            $cacheKey = $this->genCacheName($match);
            $this->cacheService->setItem($cacheKey, $data);
        }
    }


    /**
     * @param $match
     * @return string
     */
    protected function genCacheName($match) {
        
        $params = $match->getParams();
        
        //return 'cache_' . str_replace('/', '-', $match->getMatchedRouteName() . '-' . $md5);
        return md5(serialize($match->getParams()));
    }
}
